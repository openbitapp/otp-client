<?php
/**
 * Place
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenBitApp\OTPClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OTP
 *
 * OTP API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenBitApp\OTPClient\Model;

use \ArrayAccess;
use \OpenBitApp\OTPClient\ObjectSerializer;

/**
 * Place Class Doc Comment
 *
 * @category Class
 * @package  OpenBitApp\OTPClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Place implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Place';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'arrival' => 'int',
        'departure' => 'int',
        'lat' => 'double',
        'lon' => 'double',
        'name' => 'string',
        'stop_code' => 'string',
        'stop_id' => 'string',
        'stop_index' => 'int',
        'stop_sequence' => 'int',
        'vertex_type' => 'string',
        'zone_id' => 'string',
        'orig' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'arrival' => 'int64',
        'departure' => 'int64',
        'lat' => 'double',
        'lon' => 'double',
        'name' => null,
        'stop_code' => null,
        'stop_id' => null,
        'stop_index' => null,
        'stop_sequence' => null,
        'vertex_type' => null,
        'zone_id' => null,
        'orig' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'arrival' => 'arrival',
        'departure' => 'departure',
        'lat' => 'lat',
        'lon' => 'lon',
        'name' => 'name',
        'stop_code' => 'stopCode',
        'stop_id' => 'stopId',
        'stop_index' => 'stopIndex',
        'stop_sequence' => 'stopSequence',
        'vertex_type' => 'vertexType',
        'zone_id' => 'zoneId',
        'orig' => 'orig'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'arrival' => 'setArrival',
        'departure' => 'setDeparture',
        'lat' => 'setLat',
        'lon' => 'setLon',
        'name' => 'setName',
        'stop_code' => 'setStopCode',
        'stop_id' => 'setStopId',
        'stop_index' => 'setStopIndex',
        'stop_sequence' => 'setStopSequence',
        'vertex_type' => 'setVertexType',
        'zone_id' => 'setZoneId',
        'orig' => 'setOrig'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'arrival' => 'getArrival',
        'departure' => 'getDeparture',
        'lat' => 'getLat',
        'lon' => 'getLon',
        'name' => 'getName',
        'stop_code' => 'getStopCode',
        'stop_id' => 'getStopId',
        'stop_index' => 'getStopIndex',
        'stop_sequence' => 'getStopSequence',
        'vertex_type' => 'getVertexType',
        'zone_id' => 'getZoneId',
        'orig' => 'getOrig'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['arrival'] = $data['arrival'] ?? null;
        $this->container['departure'] = $data['departure'] ?? null;
        $this->container['lat'] = $data['lat'] ?? null;
        $this->container['lon'] = $data['lon'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['stop_code'] = $data['stop_code'] ?? null;
        $this->container['stop_id'] = $data['stop_id'] ?? null;
        $this->container['stop_index'] = $data['stop_index'] ?? null;
        $this->container['stop_sequence'] = $data['stop_sequence'] ?? null;
        $this->container['vertex_type'] = $data['vertex_type'] ?? null;
        $this->container['zone_id'] = $data['zone_id'] ?? null;
        $this->container['orig'] = $data['orig'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['arrival'] === null) {
            $invalidProperties[] = "'arrival' can't be null";
        }
        if ($this->container['lat'] === null) {
            $invalidProperties[] = "'lat' can't be null";
        }
        if ($this->container['lon'] === null) {
            $invalidProperties[] = "'lon' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['stop_code'] === null) {
            $invalidProperties[] = "'stop_code' can't be null";
        }
        if ($this->container['stop_id'] === null) {
            $invalidProperties[] = "'stop_id' can't be null";
        }
        if ($this->container['stop_index'] === null) {
            $invalidProperties[] = "'stop_index' can't be null";
        }
        if ($this->container['stop_sequence'] === null) {
            $invalidProperties[] = "'stop_sequence' can't be null";
        }
        if ($this->container['vertex_type'] === null) {
            $invalidProperties[] = "'vertex_type' can't be null";
        }
        if ($this->container['zone_id'] === null) {
            $invalidProperties[] = "'zone_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets arrival
     *
     * @return int
     */
    public function getArrival()
    {
        return $this->container['arrival'];
    }

    /**
     * Sets arrival
     *
     * @param int $arrival arrival
     *
     * @return self
     */
    public function setArrival($arrival)
    {
        $this->container['arrival'] = $arrival;

        return $this;
    }

    /**
     * Gets departure
     *
     * @return int|null
     */
    public function getDeparture()
    {
        return $this->container['departure'];
    }

    /**
     * Sets departure
     *
     * @param int|null $departure departure
     *
     * @return self
     */
    public function setDeparture($departure)
    {
        $this->container['departure'] = $departure;

        return $this;
    }

    /**
     * Gets lat
     *
     * @return double
     */
    public function getLat()
    {
        return $this->container['lat'];
    }

    /**
     * Sets lat
     *
     * @param double $lat lat
     *
     * @return self
     */
    public function setLat($lat)
    {
        $this->container['lat'] = $lat;

        return $this;
    }

    /**
     * Gets lon
     *
     * @return double
     */
    public function getLon()
    {
        return $this->container['lon'];
    }

    /**
     * Sets lon
     *
     * @param double $lon lon
     *
     * @return self
     */
    public function setLon($lon)
    {
        $this->container['lon'] = $lon;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets stop_code
     *
     * @return string
     */
    public function getStopCode()
    {
        return $this->container['stop_code'];
    }

    /**
     * Sets stop_code
     *
     * @param string $stop_code stop_code
     *
     * @return self
     */
    public function setStopCode($stop_code)
    {
        $this->container['stop_code'] = $stop_code;

        return $this;
    }

    /**
     * Gets stop_id
     *
     * @return string
     */
    public function getStopId()
    {
        return $this->container['stop_id'];
    }

    /**
     * Sets stop_id
     *
     * @param string $stop_id stop_id
     *
     * @return self
     */
    public function setStopId($stop_id)
    {
        $this->container['stop_id'] = $stop_id;

        return $this;
    }

    /**
     * Gets stop_index
     *
     * @return int
     */
    public function getStopIndex()
    {
        return $this->container['stop_index'];
    }

    /**
     * Sets stop_index
     *
     * @param int $stop_index stop_index
     *
     * @return self
     */
    public function setStopIndex($stop_index)
    {
        $this->container['stop_index'] = $stop_index;

        return $this;
    }

    /**
     * Gets stop_sequence
     *
     * @return int
     */
    public function getStopSequence()
    {
        return $this->container['stop_sequence'];
    }

    /**
     * Sets stop_sequence
     *
     * @param int $stop_sequence stop_sequence
     *
     * @return self
     */
    public function setStopSequence($stop_sequence)
    {
        $this->container['stop_sequence'] = $stop_sequence;

        return $this;
    }

    /**
     * Gets vertex_type
     *
     * @return string
     */
    public function getVertexType()
    {
        return $this->container['vertex_type'];
    }

    /**
     * Sets vertex_type
     *
     * @param string $vertex_type vertex_type
     *
     * @return self
     */
    public function setVertexType($vertex_type)
    {
        $this->container['vertex_type'] = $vertex_type;

        return $this;
    }

    /**
     * Gets zone_id
     *
     * @return string
     */
    public function getZoneId()
    {
        return $this->container['zone_id'];
    }

    /**
     * Sets zone_id
     *
     * @param string $zone_id zone_id
     *
     * @return self
     */
    public function setZoneId($zone_id)
    {
        $this->container['zone_id'] = $zone_id;

        return $this;
    }

    /**
     * Gets orig
     *
     * @return string|null
     */
    public function getOrig()
    {
        return $this->container['orig'];
    }

    /**
     * Sets orig
     *
     * @param string|null $orig orig
     *
     * @return self
     */
    public function setOrig($orig)
    {
        $this->container['orig'] = $orig;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


