<?php
/**
 * Leg
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenBitApp\OTPClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OTP
 *
 * OTP API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenBitApp\OTPClient\Model;

use \ArrayAccess;
use \OpenBitApp\OTPClient\ObjectSerializer;

/**
 * Leg Class Doc Comment
 *
 * @category Class
 * @package  OpenBitApp\OTPClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Leg implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Leg';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'agency_id' => 'string',
        'agency_name' => 'string',
        'agency_time_zone_offset' => 'int',
        'agency_url' => 'string',
        'arrival_delay' => 'int',
        'departure_delay' => 'int',
        'distance' => 'double',
        'duration' => 'double',
        'end_time' => 'int',
        'from' => '\OpenBitApp\OTPClient\Model\Place',
        'headsign' => 'string',
        'interline_with_previous_leg' => 'bool',
        'intermediate_stops' => '\OpenBitApp\OTPClient\Model\Place[]',
        'leg_geometry' => '\OpenBitApp\OTPClient\Model\LegGeometry',
        'mode' => 'string',
        'pathway' => 'bool',
        'real_time' => 'bool',
        'rented_bike' => 'bool',
        'route' => 'string',
        'route_color' => 'string',
        'route_id' => 'string',
        'route_long_name' => 'string',
        'route_short_name' => 'string',
        'route_text_color' => 'string',
        'route_type' => 'int',
        'service_date' => 'string',
        'start_time' => 'int',
        'steps' => '\OpenBitApp\OTPClient\Model\Step[]',
        'to' => '\OpenBitApp\OTPClient\Model\Place',
        'transit_leg' => 'bool',
        'trip_id' => 'string',
        'trip_short_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'agency_id' => null,
        'agency_name' => null,
        'agency_time_zone_offset' => null,
        'agency_url' => null,
        'arrival_delay' => null,
        'departure_delay' => null,
        'distance' => 'double',
        'duration' => 'double',
        'end_time' => 'int64',
        'from' => null,
        'headsign' => null,
        'interline_with_previous_leg' => null,
        'intermediate_stops' => null,
        'leg_geometry' => null,
        'mode' => null,
        'pathway' => null,
        'real_time' => null,
        'rented_bike' => null,
        'route' => null,
        'route_color' => null,
        'route_id' => null,
        'route_long_name' => null,
        'route_short_name' => null,
        'route_text_color' => null,
        'route_type' => null,
        'service_date' => null,
        'start_time' => 'int64',
        'steps' => null,
        'to' => null,
        'transit_leg' => null,
        'trip_id' => null,
        'trip_short_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'agency_id' => 'agencyId',
        'agency_name' => 'agencyName',
        'agency_time_zone_offset' => 'agencyTimeZoneOffset',
        'agency_url' => 'agencyUrl',
        'arrival_delay' => 'arrivalDelay',
        'departure_delay' => 'departureDelay',
        'distance' => 'distance',
        'duration' => 'duration',
        'end_time' => 'endTime',
        'from' => 'from',
        'headsign' => 'headsign',
        'interline_with_previous_leg' => 'interlineWithPreviousLeg',
        'intermediate_stops' => 'intermediateStops',
        'leg_geometry' => 'legGeometry',
        'mode' => 'mode',
        'pathway' => 'pathway',
        'real_time' => 'realTime',
        'rented_bike' => 'rentedBike',
        'route' => 'route',
        'route_color' => 'routeColor',
        'route_id' => 'routeId',
        'route_long_name' => 'routeLongName',
        'route_short_name' => 'routeShortName',
        'route_text_color' => 'routeTextColor',
        'route_type' => 'routeType',
        'service_date' => 'serviceDate',
        'start_time' => 'startTime',
        'steps' => 'steps',
        'to' => 'to',
        'transit_leg' => 'transitLeg',
        'trip_id' => 'tripId',
        'trip_short_name' => 'tripShortName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'agency_id' => 'setAgencyId',
        'agency_name' => 'setAgencyName',
        'agency_time_zone_offset' => 'setAgencyTimeZoneOffset',
        'agency_url' => 'setAgencyUrl',
        'arrival_delay' => 'setArrivalDelay',
        'departure_delay' => 'setDepartureDelay',
        'distance' => 'setDistance',
        'duration' => 'setDuration',
        'end_time' => 'setEndTime',
        'from' => 'setFrom',
        'headsign' => 'setHeadsign',
        'interline_with_previous_leg' => 'setInterlineWithPreviousLeg',
        'intermediate_stops' => 'setIntermediateStops',
        'leg_geometry' => 'setLegGeometry',
        'mode' => 'setMode',
        'pathway' => 'setPathway',
        'real_time' => 'setRealTime',
        'rented_bike' => 'setRentedBike',
        'route' => 'setRoute',
        'route_color' => 'setRouteColor',
        'route_id' => 'setRouteId',
        'route_long_name' => 'setRouteLongName',
        'route_short_name' => 'setRouteShortName',
        'route_text_color' => 'setRouteTextColor',
        'route_type' => 'setRouteType',
        'service_date' => 'setServiceDate',
        'start_time' => 'setStartTime',
        'steps' => 'setSteps',
        'to' => 'setTo',
        'transit_leg' => 'setTransitLeg',
        'trip_id' => 'setTripId',
        'trip_short_name' => 'setTripShortName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'agency_id' => 'getAgencyId',
        'agency_name' => 'getAgencyName',
        'agency_time_zone_offset' => 'getAgencyTimeZoneOffset',
        'agency_url' => 'getAgencyUrl',
        'arrival_delay' => 'getArrivalDelay',
        'departure_delay' => 'getDepartureDelay',
        'distance' => 'getDistance',
        'duration' => 'getDuration',
        'end_time' => 'getEndTime',
        'from' => 'getFrom',
        'headsign' => 'getHeadsign',
        'interline_with_previous_leg' => 'getInterlineWithPreviousLeg',
        'intermediate_stops' => 'getIntermediateStops',
        'leg_geometry' => 'getLegGeometry',
        'mode' => 'getMode',
        'pathway' => 'getPathway',
        'real_time' => 'getRealTime',
        'rented_bike' => 'getRentedBike',
        'route' => 'getRoute',
        'route_color' => 'getRouteColor',
        'route_id' => 'getRouteId',
        'route_long_name' => 'getRouteLongName',
        'route_short_name' => 'getRouteShortName',
        'route_text_color' => 'getRouteTextColor',
        'route_type' => 'getRouteType',
        'service_date' => 'getServiceDate',
        'start_time' => 'getStartTime',
        'steps' => 'getSteps',
        'to' => 'getTo',
        'transit_leg' => 'getTransitLeg',
        'trip_id' => 'getTripId',
        'trip_short_name' => 'getTripShortName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['agency_id'] = $data['agency_id'] ?? null;
        $this->container['agency_name'] = $data['agency_name'] ?? null;
        $this->container['agency_time_zone_offset'] = $data['agency_time_zone_offset'] ?? null;
        $this->container['agency_url'] = $data['agency_url'] ?? null;
        $this->container['arrival_delay'] = $data['arrival_delay'] ?? null;
        $this->container['departure_delay'] = $data['departure_delay'] ?? null;
        $this->container['distance'] = $data['distance'] ?? null;
        $this->container['duration'] = $data['duration'] ?? null;
        $this->container['end_time'] = $data['end_time'] ?? null;
        $this->container['from'] = $data['from'] ?? null;
        $this->container['headsign'] = $data['headsign'] ?? null;
        $this->container['interline_with_previous_leg'] = $data['interline_with_previous_leg'] ?? null;
        $this->container['intermediate_stops'] = $data['intermediate_stops'] ?? null;
        $this->container['leg_geometry'] = $data['leg_geometry'] ?? null;
        $this->container['mode'] = $data['mode'] ?? null;
        $this->container['pathway'] = $data['pathway'] ?? null;
        $this->container['real_time'] = $data['real_time'] ?? null;
        $this->container['rented_bike'] = $data['rented_bike'] ?? null;
        $this->container['route'] = $data['route'] ?? null;
        $this->container['route_color'] = $data['route_color'] ?? null;
        $this->container['route_id'] = $data['route_id'] ?? null;
        $this->container['route_long_name'] = $data['route_long_name'] ?? null;
        $this->container['route_short_name'] = $data['route_short_name'] ?? null;
        $this->container['route_text_color'] = $data['route_text_color'] ?? null;
        $this->container['route_type'] = $data['route_type'] ?? null;
        $this->container['service_date'] = $data['service_date'] ?? null;
        $this->container['start_time'] = $data['start_time'] ?? null;
        $this->container['steps'] = $data['steps'] ?? null;
        $this->container['to'] = $data['to'] ?? null;
        $this->container['transit_leg'] = $data['transit_leg'] ?? null;
        $this->container['trip_id'] = $data['trip_id'] ?? null;
        $this->container['trip_short_name'] = $data['trip_short_name'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['agency_id'] === null) {
            $invalidProperties[] = "'agency_id' can't be null";
        }
        if ($this->container['agency_name'] === null) {
            $invalidProperties[] = "'agency_name' can't be null";
        }
        if ($this->container['agency_time_zone_offset'] === null) {
            $invalidProperties[] = "'agency_time_zone_offset' can't be null";
        }
        if ($this->container['agency_url'] === null) {
            $invalidProperties[] = "'agency_url' can't be null";
        }
        if ($this->container['arrival_delay'] === null) {
            $invalidProperties[] = "'arrival_delay' can't be null";
        }
        if ($this->container['departure_delay'] === null) {
            $invalidProperties[] = "'departure_delay' can't be null";
        }
        if ($this->container['distance'] === null) {
            $invalidProperties[] = "'distance' can't be null";
        }
        if ($this->container['duration'] === null) {
            $invalidProperties[] = "'duration' can't be null";
        }
        if ($this->container['end_time'] === null) {
            $invalidProperties[] = "'end_time' can't be null";
        }
        if ($this->container['from'] === null) {
            $invalidProperties[] = "'from' can't be null";
        }
        if ($this->container['headsign'] === null) {
            $invalidProperties[] = "'headsign' can't be null";
        }
        if ($this->container['interline_with_previous_leg'] === null) {
            $invalidProperties[] = "'interline_with_previous_leg' can't be null";
        }
        if ($this->container['intermediate_stops'] === null) {
            $invalidProperties[] = "'intermediate_stops' can't be null";
        }
        if ($this->container['leg_geometry'] === null) {
            $invalidProperties[] = "'leg_geometry' can't be null";
        }
        if ($this->container['mode'] === null) {
            $invalidProperties[] = "'mode' can't be null";
        }
        if ($this->container['pathway'] === null) {
            $invalidProperties[] = "'pathway' can't be null";
        }
        if ($this->container['real_time'] === null) {
            $invalidProperties[] = "'real_time' can't be null";
        }
        if ($this->container['rented_bike'] === null) {
            $invalidProperties[] = "'rented_bike' can't be null";
        }
        if ($this->container['route'] === null) {
            $invalidProperties[] = "'route' can't be null";
        }
        if ($this->container['route_color'] === null) {
            $invalidProperties[] = "'route_color' can't be null";
        }
        if ($this->container['route_id'] === null) {
            $invalidProperties[] = "'route_id' can't be null";
        }
        if ($this->container['route_long_name'] === null) {
            $invalidProperties[] = "'route_long_name' can't be null";
        }
        if ($this->container['route_short_name'] === null) {
            $invalidProperties[] = "'route_short_name' can't be null";
        }
        if ($this->container['route_text_color'] === null) {
            $invalidProperties[] = "'route_text_color' can't be null";
        }
        if ($this->container['route_type'] === null) {
            $invalidProperties[] = "'route_type' can't be null";
        }
        if ($this->container['service_date'] === null) {
            $invalidProperties[] = "'service_date' can't be null";
        }
        if ($this->container['start_time'] === null) {
            $invalidProperties[] = "'start_time' can't be null";
        }
        if ($this->container['steps'] === null) {
            $invalidProperties[] = "'steps' can't be null";
        }
        if ($this->container['to'] === null) {
            $invalidProperties[] = "'to' can't be null";
        }
        if ($this->container['transit_leg'] === null) {
            $invalidProperties[] = "'transit_leg' can't be null";
        }
        if ($this->container['trip_id'] === null) {
            $invalidProperties[] = "'trip_id' can't be null";
        }
        if ($this->container['trip_short_name'] === null) {
            $invalidProperties[] = "'trip_short_name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets agency_id
     *
     * @return string
     */
    public function getAgencyId()
    {
        return $this->container['agency_id'];
    }

    /**
     * Sets agency_id
     *
     * @param string $agency_id agency_id
     *
     * @return self
     */
    public function setAgencyId($agency_id)
    {
        $this->container['agency_id'] = $agency_id;

        return $this;
    }

    /**
     * Gets agency_name
     *
     * @return string
     */
    public function getAgencyName()
    {
        return $this->container['agency_name'];
    }

    /**
     * Sets agency_name
     *
     * @param string $agency_name agency_name
     *
     * @return self
     */
    public function setAgencyName($agency_name)
    {
        $this->container['agency_name'] = $agency_name;

        return $this;
    }

    /**
     * Gets agency_time_zone_offset
     *
     * @return int
     */
    public function getAgencyTimeZoneOffset()
    {
        return $this->container['agency_time_zone_offset'];
    }

    /**
     * Sets agency_time_zone_offset
     *
     * @param int $agency_time_zone_offset agency_time_zone_offset
     *
     * @return self
     */
    public function setAgencyTimeZoneOffset($agency_time_zone_offset)
    {
        $this->container['agency_time_zone_offset'] = $agency_time_zone_offset;

        return $this;
    }

    /**
     * Gets agency_url
     *
     * @return string
     */
    public function getAgencyUrl()
    {
        return $this->container['agency_url'];
    }

    /**
     * Sets agency_url
     *
     * @param string $agency_url agency_url
     *
     * @return self
     */
    public function setAgencyUrl($agency_url)
    {
        $this->container['agency_url'] = $agency_url;

        return $this;
    }

    /**
     * Gets arrival_delay
     *
     * @return int
     */
    public function getArrivalDelay()
    {
        return $this->container['arrival_delay'];
    }

    /**
     * Sets arrival_delay
     *
     * @param int $arrival_delay arrival_delay
     *
     * @return self
     */
    public function setArrivalDelay($arrival_delay)
    {
        $this->container['arrival_delay'] = $arrival_delay;

        return $this;
    }

    /**
     * Gets departure_delay
     *
     * @return int
     */
    public function getDepartureDelay()
    {
        return $this->container['departure_delay'];
    }

    /**
     * Sets departure_delay
     *
     * @param int $departure_delay departure_delay
     *
     * @return self
     */
    public function setDepartureDelay($departure_delay)
    {
        $this->container['departure_delay'] = $departure_delay;

        return $this;
    }

    /**
     * Gets distance
     *
     * @return double
     */
    public function getDistance()
    {
        return $this->container['distance'];
    }

    /**
     * Sets distance
     *
     * @param double $distance distance
     *
     * @return self
     */
    public function setDistance($distance)
    {
        $this->container['distance'] = $distance;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return double
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param double $duration duration
     *
     * @return self
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets end_time
     *
     * @return int
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     *
     * @param int $end_time end_time
     *
     * @return self
     */
    public function setEndTime($end_time)
    {
        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets from
     *
     * @return \OpenBitApp\OTPClient\Model\Place
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     *
     * @param \OpenBitApp\OTPClient\Model\Place $from from
     *
     * @return self
     */
    public function setFrom($from)
    {
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets headsign
     *
     * @return string
     */
    public function getHeadsign()
    {
        return $this->container['headsign'];
    }

    /**
     * Sets headsign
     *
     * @param string $headsign headsign
     *
     * @return self
     */
    public function setHeadsign($headsign)
    {
        $this->container['headsign'] = $headsign;

        return $this;
    }

    /**
     * Gets interline_with_previous_leg
     *
     * @return bool
     */
    public function getInterlineWithPreviousLeg()
    {
        return $this->container['interline_with_previous_leg'];
    }

    /**
     * Sets interline_with_previous_leg
     *
     * @param bool $interline_with_previous_leg interline_with_previous_leg
     *
     * @return self
     */
    public function setInterlineWithPreviousLeg($interline_with_previous_leg)
    {
        $this->container['interline_with_previous_leg'] = $interline_with_previous_leg;

        return $this;
    }

    /**
     * Gets intermediate_stops
     *
     * @return \OpenBitApp\OTPClient\Model\Place[]
     */
    public function getIntermediateStops()
    {
        return $this->container['intermediate_stops'];
    }

    /**
     * Sets intermediate_stops
     *
     * @param \OpenBitApp\OTPClient\Model\Place[] $intermediate_stops intermediate_stops
     *
     * @return self
     */
    public function setIntermediateStops($intermediate_stops)
    {
        $this->container['intermediate_stops'] = $intermediate_stops;

        return $this;
    }

    /**
     * Gets leg_geometry
     *
     * @return \OpenBitApp\OTPClient\Model\LegGeometry
     */
    public function getLegGeometry()
    {
        return $this->container['leg_geometry'];
    }

    /**
     * Sets leg_geometry
     *
     * @param \OpenBitApp\OTPClient\Model\LegGeometry $leg_geometry leg_geometry
     *
     * @return self
     */
    public function setLegGeometry($leg_geometry)
    {
        $this->container['leg_geometry'] = $leg_geometry;

        return $this;
    }

    /**
     * Gets mode
     *
     * @return string
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param string $mode mode
     *
     * @return self
     */
    public function setMode($mode)
    {
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets pathway
     *
     * @return bool
     */
    public function getPathway()
    {
        return $this->container['pathway'];
    }

    /**
     * Sets pathway
     *
     * @param bool $pathway pathway
     *
     * @return self
     */
    public function setPathway($pathway)
    {
        $this->container['pathway'] = $pathway;

        return $this;
    }

    /**
     * Gets real_time
     *
     * @return bool
     */
    public function getRealTime()
    {
        return $this->container['real_time'];
    }

    /**
     * Sets real_time
     *
     * @param bool $real_time real_time
     *
     * @return self
     */
    public function setRealTime($real_time)
    {
        $this->container['real_time'] = $real_time;

        return $this;
    }

    /**
     * Gets rented_bike
     *
     * @return bool
     */
    public function getRentedBike()
    {
        return $this->container['rented_bike'];
    }

    /**
     * Sets rented_bike
     *
     * @param bool $rented_bike rented_bike
     *
     * @return self
     */
    public function setRentedBike($rented_bike)
    {
        $this->container['rented_bike'] = $rented_bike;

        return $this;
    }

    /**
     * Gets route
     *
     * @return string
     */
    public function getRoute()
    {
        return $this->container['route'];
    }

    /**
     * Sets route
     *
     * @param string $route route
     *
     * @return self
     */
    public function setRoute($route)
    {
        $this->container['route'] = $route;

        return $this;
    }

    /**
     * Gets route_color
     *
     * @return string
     */
    public function getRouteColor()
    {
        return $this->container['route_color'];
    }

    /**
     * Sets route_color
     *
     * @param string $route_color route_color
     *
     * @return self
     */
    public function setRouteColor($route_color)
    {
        $this->container['route_color'] = $route_color;

        return $this;
    }

    /**
     * Gets route_id
     *
     * @return string
     */
    public function getRouteId()
    {
        return $this->container['route_id'];
    }

    /**
     * Sets route_id
     *
     * @param string $route_id route_id
     *
     * @return self
     */
    public function setRouteId($route_id)
    {
        $this->container['route_id'] = $route_id;

        return $this;
    }

    /**
     * Gets route_long_name
     *
     * @return string
     */
    public function getRouteLongName()
    {
        return $this->container['route_long_name'];
    }

    /**
     * Sets route_long_name
     *
     * @param string $route_long_name route_long_name
     *
     * @return self
     */
    public function setRouteLongName($route_long_name)
    {
        $this->container['route_long_name'] = $route_long_name;

        return $this;
    }

    /**
     * Gets route_short_name
     *
     * @return string
     */
    public function getRouteShortName()
    {
        return $this->container['route_short_name'];
    }

    /**
     * Sets route_short_name
     *
     * @param string $route_short_name route_short_name
     *
     * @return self
     */
    public function setRouteShortName($route_short_name)
    {
        $this->container['route_short_name'] = $route_short_name;

        return $this;
    }

    /**
     * Gets route_text_color
     *
     * @return string
     */
    public function getRouteTextColor()
    {
        return $this->container['route_text_color'];
    }

    /**
     * Sets route_text_color
     *
     * @param string $route_text_color route_text_color
     *
     * @return self
     */
    public function setRouteTextColor($route_text_color)
    {
        $this->container['route_text_color'] = $route_text_color;

        return $this;
    }

    /**
     * Gets route_type
     *
     * @return int
     */
    public function getRouteType()
    {
        return $this->container['route_type'];
    }

    /**
     * Sets route_type
     *
     * @param int $route_type route_type
     *
     * @return self
     */
    public function setRouteType($route_type)
    {
        $this->container['route_type'] = $route_type;

        return $this;
    }

    /**
     * Gets service_date
     *
     * @return string
     */
    public function getServiceDate()
    {
        return $this->container['service_date'];
    }

    /**
     * Sets service_date
     *
     * @param string $service_date service_date
     *
     * @return self
     */
    public function setServiceDate($service_date)
    {
        $this->container['service_date'] = $service_date;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return int
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param int $start_time start_time
     *
     * @return self
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets steps
     *
     * @return \OpenBitApp\OTPClient\Model\Step[]
     */
    public function getSteps()
    {
        return $this->container['steps'];
    }

    /**
     * Sets steps
     *
     * @param \OpenBitApp\OTPClient\Model\Step[] $steps steps
     *
     * @return self
     */
    public function setSteps($steps)
    {
        $this->container['steps'] = $steps;

        return $this;
    }

    /**
     * Gets to
     *
     * @return \OpenBitApp\OTPClient\Model\Place
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param \OpenBitApp\OTPClient\Model\Place $to to
     *
     * @return self
     */
    public function setTo($to)
    {
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets transit_leg
     *
     * @return bool
     */
    public function getTransitLeg()
    {
        return $this->container['transit_leg'];
    }

    /**
     * Sets transit_leg
     *
     * @param bool $transit_leg transit_leg
     *
     * @return self
     */
    public function setTransitLeg($transit_leg)
    {
        $this->container['transit_leg'] = $transit_leg;

        return $this;
    }

    /**
     * Gets trip_id
     *
     * @return string
     */
    public function getTripId()
    {
        return $this->container['trip_id'];
    }

    /**
     * Sets trip_id
     *
     * @param string $trip_id trip_id
     *
     * @return self
     */
    public function setTripId($trip_id)
    {
        $this->container['trip_id'] = $trip_id;

        return $this;
    }

    /**
     * Gets trip_short_name
     *
     * @return string
     */
    public function getTripShortName()
    {
        return $this->container['trip_short_name'];
    }

    /**
     * Sets trip_short_name
     *
     * @param string $trip_short_name trip_short_name
     *
     * @return self
     */
    public function setTripShortName($trip_short_name)
    {
        $this->container['trip_short_name'] = $trip_short_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


