<?php
/**
 * LocalizedAlert
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenBitApp\OTPClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OTP
 *
 * OTP API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenBitApp\OTPClient\Model;

use \ArrayAccess;
use \OpenBitApp\OTPClient\ObjectSerializer;

/**
 * LocalizedAlert Class Doc Comment
 *
 * @category Class
 * @package  OpenBitApp\OTPClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class LocalizedAlert implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'LocalizedAlert';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'alert_header_text' => 'string',
        'alert_description_text' => 'string',
        'alert_url' => 'string',
        'effective_start_date' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'alert_header_text' => null,
        'alert_description_text' => null,
        'alert_url' => null,
        'effective_start_date' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'alert_header_text' => 'alertHeaderText',
        'alert_description_text' => 'alertDescriptionText',
        'alert_url' => 'alertUrl',
        'effective_start_date' => 'effectiveStartDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'alert_header_text' => 'setAlertHeaderText',
        'alert_description_text' => 'setAlertDescriptionText',
        'alert_url' => 'setAlertUrl',
        'effective_start_date' => 'setEffectiveStartDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'alert_header_text' => 'getAlertHeaderText',
        'alert_description_text' => 'getAlertDescriptionText',
        'alert_url' => 'getAlertUrl',
        'effective_start_date' => 'getEffectiveStartDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['alert_header_text'] = $data['alert_header_text'] ?? null;
        $this->container['alert_description_text'] = $data['alert_description_text'] ?? null;
        $this->container['alert_url'] = $data['alert_url'] ?? null;
        $this->container['effective_start_date'] = $data['effective_start_date'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['alert_header_text'] === null) {
            $invalidProperties[] = "'alert_header_text' can't be null";
        }
        if ($this->container['alert_description_text'] === null) {
            $invalidProperties[] = "'alert_description_text' can't be null";
        }
        if ($this->container['alert_url'] === null) {
            $invalidProperties[] = "'alert_url' can't be null";
        }
        if ($this->container['effective_start_date'] === null) {
            $invalidProperties[] = "'effective_start_date' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets alert_header_text
     *
     * @return string
     */
    public function getAlertHeaderText()
    {
        return $this->container['alert_header_text'];
    }

    /**
     * Sets alert_header_text
     *
     * @param string $alert_header_text alert_header_text
     *
     * @return self
     */
    public function setAlertHeaderText($alert_header_text)
    {
        $this->container['alert_header_text'] = $alert_header_text;

        return $this;
    }

    /**
     * Gets alert_description_text
     *
     * @return string
     */
    public function getAlertDescriptionText()
    {
        return $this->container['alert_description_text'];
    }

    /**
     * Sets alert_description_text
     *
     * @param string $alert_description_text alert_description_text
     *
     * @return self
     */
    public function setAlertDescriptionText($alert_description_text)
    {
        $this->container['alert_description_text'] = $alert_description_text;

        return $this;
    }

    /**
     * Gets alert_url
     *
     * @return string
     */
    public function getAlertUrl()
    {
        return $this->container['alert_url'];
    }

    /**
     * Sets alert_url
     *
     * @param string $alert_url alert_url
     *
     * @return self
     */
    public function setAlertUrl($alert_url)
    {
        $this->container['alert_url'] = $alert_url;

        return $this;
    }

    /**
     * Gets effective_start_date
     *
     * @return string
     */
    public function getEffectiveStartDate()
    {
        return $this->container['effective_start_date'];
    }

    /**
     * Sets effective_start_date
     *
     * @param string $effective_start_date effective_start_date
     *
     * @return self
     */
    public function setEffectiveStartDate($effective_start_date)
    {
        $this->container['effective_start_date'] = $effective_start_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


