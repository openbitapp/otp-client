<?php
/**
 * RequestParameters
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenBitApp\OTPClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OTP
 *
 * OTP API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenBitApp\OTPClient\Model;

use \ArrayAccess;
use \OpenBitApp\OTPClient\ObjectSerializer;

/**
 * RequestParameters Class Doc Comment
 *
 * @category Class
 * @package  OpenBitApp\OTPClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class RequestParameters implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RequestParameters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'arrive_by' => 'string',
        'date' => 'string',
        'from_place' => 'string',
        'locale' => 'string',
        'max_walk_distance' => 'string',
        'mode' => 'string',
        'show_intermediate_stops' => 'string',
        'time' => 'string',
        'to_place' => 'string',
        'wheelchair' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'arrive_by' => null,
        'date' => null,
        'from_place' => null,
        'locale' => null,
        'max_walk_distance' => null,
        'mode' => null,
        'show_intermediate_stops' => null,
        'time' => null,
        'to_place' => null,
        'wheelchair' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'arrive_by' => 'arriveBy',
        'date' => 'date',
        'from_place' => 'fromPlace',
        'locale' => 'locale',
        'max_walk_distance' => 'maxWalkDistance',
        'mode' => 'mode',
        'show_intermediate_stops' => 'showIntermediateStops',
        'time' => 'time',
        'to_place' => 'toPlace',
        'wheelchair' => 'wheelchair'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'arrive_by' => 'setArriveBy',
        'date' => 'setDate',
        'from_place' => 'setFromPlace',
        'locale' => 'setLocale',
        'max_walk_distance' => 'setMaxWalkDistance',
        'mode' => 'setMode',
        'show_intermediate_stops' => 'setShowIntermediateStops',
        'time' => 'setTime',
        'to_place' => 'setToPlace',
        'wheelchair' => 'setWheelchair'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'arrive_by' => 'getArriveBy',
        'date' => 'getDate',
        'from_place' => 'getFromPlace',
        'locale' => 'getLocale',
        'max_walk_distance' => 'getMaxWalkDistance',
        'mode' => 'getMode',
        'show_intermediate_stops' => 'getShowIntermediateStops',
        'time' => 'getTime',
        'to_place' => 'getToPlace',
        'wheelchair' => 'getWheelchair'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['arrive_by'] = $data['arrive_by'] ?? null;
        $this->container['date'] = $data['date'] ?? null;
        $this->container['from_place'] = $data['from_place'] ?? null;
        $this->container['locale'] = $data['locale'] ?? null;
        $this->container['max_walk_distance'] = $data['max_walk_distance'] ?? null;
        $this->container['mode'] = $data['mode'] ?? null;
        $this->container['show_intermediate_stops'] = $data['show_intermediate_stops'] ?? null;
        $this->container['time'] = $data['time'] ?? null;
        $this->container['to_place'] = $data['to_place'] ?? null;
        $this->container['wheelchair'] = $data['wheelchair'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['arrive_by'] === null) {
            $invalidProperties[] = "'arrive_by' can't be null";
        }
        if ($this->container['date'] === null) {
            $invalidProperties[] = "'date' can't be null";
        }
        if ($this->container['from_place'] === null) {
            $invalidProperties[] = "'from_place' can't be null";
        }
        if ($this->container['locale'] === null) {
            $invalidProperties[] = "'locale' can't be null";
        }
        if ($this->container['max_walk_distance'] === null) {
            $invalidProperties[] = "'max_walk_distance' can't be null";
        }
        if ($this->container['mode'] === null) {
            $invalidProperties[] = "'mode' can't be null";
        }
        if ($this->container['show_intermediate_stops'] === null) {
            $invalidProperties[] = "'show_intermediate_stops' can't be null";
        }
        if ($this->container['time'] === null) {
            $invalidProperties[] = "'time' can't be null";
        }
        if ($this->container['to_place'] === null) {
            $invalidProperties[] = "'to_place' can't be null";
        }
        if ($this->container['wheelchair'] === null) {
            $invalidProperties[] = "'wheelchair' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets arrive_by
     *
     * @return string
     */
    public function getArriveBy()
    {
        return $this->container['arrive_by'];
    }

    /**
     * Sets arrive_by
     *
     * @param string $arrive_by arrive_by
     *
     * @return self
     */
    public function setArriveBy($arrive_by)
    {
        $this->container['arrive_by'] = $arrive_by;

        return $this;
    }

    /**
     * Gets date
     *
     * @return string
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param string $date date
     *
     * @return self
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets from_place
     *
     * @return string
     */
    public function getFromPlace()
    {
        return $this->container['from_place'];
    }

    /**
     * Sets from_place
     *
     * @param string $from_place from_place
     *
     * @return self
     */
    public function setFromPlace($from_place)
    {
        $this->container['from_place'] = $from_place;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string $locale locale
     *
     * @return self
     */
    public function setLocale($locale)
    {
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets max_walk_distance
     *
     * @return string
     */
    public function getMaxWalkDistance()
    {
        return $this->container['max_walk_distance'];
    }

    /**
     * Sets max_walk_distance
     *
     * @param string $max_walk_distance max_walk_distance
     *
     * @return self
     */
    public function setMaxWalkDistance($max_walk_distance)
    {
        $this->container['max_walk_distance'] = $max_walk_distance;

        return $this;
    }

    /**
     * Gets mode
     *
     * @return string
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param string $mode mode
     *
     * @return self
     */
    public function setMode($mode)
    {
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets show_intermediate_stops
     *
     * @return string
     */
    public function getShowIntermediateStops()
    {
        return $this->container['show_intermediate_stops'];
    }

    /**
     * Sets show_intermediate_stops
     *
     * @param string $show_intermediate_stops show_intermediate_stops
     *
     * @return self
     */
    public function setShowIntermediateStops($show_intermediate_stops)
    {
        $this->container['show_intermediate_stops'] = $show_intermediate_stops;

        return $this;
    }

    /**
     * Gets time
     *
     * @return string
     */
    public function getTime()
    {
        return $this->container['time'];
    }

    /**
     * Sets time
     *
     * @param string $time time
     *
     * @return self
     */
    public function setTime($time)
    {
        $this->container['time'] = $time;

        return $this;
    }

    /**
     * Gets to_place
     *
     * @return string
     */
    public function getToPlace()
    {
        return $this->container['to_place'];
    }

    /**
     * Sets to_place
     *
     * @param string $to_place to_place
     *
     * @return self
     */
    public function setToPlace($to_place)
    {
        $this->container['to_place'] = $to_place;

        return $this;
    }

    /**
     * Gets wheelchair
     *
     * @return string
     */
    public function getWheelchair()
    {
        return $this->container['wheelchair'];
    }

    /**
     * Sets wheelchair
     *
     * @param string $wheelchair wheelchair
     *
     * @return self
     */
    public function setWheelchair($wheelchair)
    {
        $this->container['wheelchair'] = $wheelchair;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


