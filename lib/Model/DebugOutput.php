<?php
/**
 * DebugOutput
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenBitApp\OTPClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OTP
 *
 * OTP API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenBitApp\OTPClient\Model;

use \ArrayAccess;
use \OpenBitApp\OTPClient\ObjectSerializer;

/**
 * DebugOutput Class Doc Comment
 *
 * @category Class
 * @package  OpenBitApp\OTPClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class DebugOutput implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DebugOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'path_calculation_time' => 'int',
        'path_times' => 'int[]',
        'precalculation_time' => 'int',
        'rendering_time' => 'int',
        'timed_out' => 'bool',
        'total_time' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'path_calculation_time' => null,
        'path_times' => null,
        'precalculation_time' => null,
        'rendering_time' => null,
        'timed_out' => null,
        'total_time' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'path_calculation_time' => 'pathCalculationTime',
        'path_times' => 'pathTimes',
        'precalculation_time' => 'precalculationTime',
        'rendering_time' => 'renderingTime',
        'timed_out' => 'timedOut',
        'total_time' => 'totalTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'path_calculation_time' => 'setPathCalculationTime',
        'path_times' => 'setPathTimes',
        'precalculation_time' => 'setPrecalculationTime',
        'rendering_time' => 'setRenderingTime',
        'timed_out' => 'setTimedOut',
        'total_time' => 'setTotalTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'path_calculation_time' => 'getPathCalculationTime',
        'path_times' => 'getPathTimes',
        'precalculation_time' => 'getPrecalculationTime',
        'rendering_time' => 'getRenderingTime',
        'timed_out' => 'getTimedOut',
        'total_time' => 'getTotalTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['path_calculation_time'] = $data['path_calculation_time'] ?? null;
        $this->container['path_times'] = $data['path_times'] ?? null;
        $this->container['precalculation_time'] = $data['precalculation_time'] ?? null;
        $this->container['rendering_time'] = $data['rendering_time'] ?? null;
        $this->container['timed_out'] = $data['timed_out'] ?? null;
        $this->container['total_time'] = $data['total_time'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['path_calculation_time'] === null) {
            $invalidProperties[] = "'path_calculation_time' can't be null";
        }
        if ($this->container['path_times'] === null) {
            $invalidProperties[] = "'path_times' can't be null";
        }
        if ($this->container['precalculation_time'] === null) {
            $invalidProperties[] = "'precalculation_time' can't be null";
        }
        if ($this->container['rendering_time'] === null) {
            $invalidProperties[] = "'rendering_time' can't be null";
        }
        if ($this->container['timed_out'] === null) {
            $invalidProperties[] = "'timed_out' can't be null";
        }
        if ($this->container['total_time'] === null) {
            $invalidProperties[] = "'total_time' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets path_calculation_time
     *
     * @return int
     */
    public function getPathCalculationTime()
    {
        return $this->container['path_calculation_time'];
    }

    /**
     * Sets path_calculation_time
     *
     * @param int $path_calculation_time path_calculation_time
     *
     * @return self
     */
    public function setPathCalculationTime($path_calculation_time)
    {
        $this->container['path_calculation_time'] = $path_calculation_time;

        return $this;
    }

    /**
     * Gets path_times
     *
     * @return int[]
     */
    public function getPathTimes()
    {
        return $this->container['path_times'];
    }

    /**
     * Sets path_times
     *
     * @param int[] $path_times path_times
     *
     * @return self
     */
    public function setPathTimes($path_times)
    {
        $this->container['path_times'] = $path_times;

        return $this;
    }

    /**
     * Gets precalculation_time
     *
     * @return int
     */
    public function getPrecalculationTime()
    {
        return $this->container['precalculation_time'];
    }

    /**
     * Sets precalculation_time
     *
     * @param int $precalculation_time precalculation_time
     *
     * @return self
     */
    public function setPrecalculationTime($precalculation_time)
    {
        $this->container['precalculation_time'] = $precalculation_time;

        return $this;
    }

    /**
     * Gets rendering_time
     *
     * @return int
     */
    public function getRenderingTime()
    {
        return $this->container['rendering_time'];
    }

    /**
     * Sets rendering_time
     *
     * @param int $rendering_time rendering_time
     *
     * @return self
     */
    public function setRenderingTime($rendering_time)
    {
        $this->container['rendering_time'] = $rendering_time;

        return $this;
    }

    /**
     * Gets timed_out
     *
     * @return bool
     */
    public function getTimedOut()
    {
        return $this->container['timed_out'];
    }

    /**
     * Sets timed_out
     *
     * @param bool $timed_out timed_out
     *
     * @return self
     */
    public function setTimedOut($timed_out)
    {
        $this->container['timed_out'] = $timed_out;

        return $this;
    }

    /**
     * Gets total_time
     *
     * @return int
     */
    public function getTotalTime()
    {
        return $this->container['total_time'];
    }

    /**
     * Sets total_time
     *
     * @param int $total_time total_time
     *
     * @return self
     */
    public function setTotalTime($total_time)
    {
        $this->container['total_time'] = $total_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


