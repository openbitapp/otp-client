<?php
/**
 * Step
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenBitApp\OTPClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OTP
 *
 * OTP API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenBitApp\OTPClient\Model;

use \ArrayAccess;
use \OpenBitApp\OTPClient\ObjectSerializer;

/**
 * Step Class Doc Comment
 *
 * @category Class
 * @package  OpenBitApp\OTPClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Step implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Step';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'distance' => 'double',
        'relative_direction' => '\OpenBitApp\OTPClient\Model\RelativeDirection',
        'street_name' => 'string',
        'absolute_direction' => '\OpenBitApp\OTPClient\Model\AbsoluteDirection',
        'exit' => 'string',
        'stay_on' => 'bool',
        'area' => 'bool',
        'bogus_name' => 'bool',
        'lat' => 'double',
        'lon' => 'double',
        'alerts' => '\OpenBitApp\OTPClient\Model\LocalizedAlert[]',
        'elevation' => '\OpenBitApp\OTPClient\Model\Elevation[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'distance' => 'double',
        'relative_direction' => null,
        'street_name' => null,
        'absolute_direction' => null,
        'exit' => null,
        'stay_on' => null,
        'area' => null,
        'bogus_name' => null,
        'lat' => 'double',
        'lon' => 'double',
        'alerts' => null,
        'elevation' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'distance' => 'distance',
        'relative_direction' => 'relativeDirection',
        'street_name' => 'streetName',
        'absolute_direction' => 'absoluteDirection',
        'exit' => 'exit',
        'stay_on' => 'stayOn',
        'area' => 'area',
        'bogus_name' => 'bogusName',
        'lat' => 'lat',
        'lon' => 'lon',
        'alerts' => 'alerts',
        'elevation' => 'elevation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'distance' => 'setDistance',
        'relative_direction' => 'setRelativeDirection',
        'street_name' => 'setStreetName',
        'absolute_direction' => 'setAbsoluteDirection',
        'exit' => 'setExit',
        'stay_on' => 'setStayOn',
        'area' => 'setArea',
        'bogus_name' => 'setBogusName',
        'lat' => 'setLat',
        'lon' => 'setLon',
        'alerts' => 'setAlerts',
        'elevation' => 'setElevation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'distance' => 'getDistance',
        'relative_direction' => 'getRelativeDirection',
        'street_name' => 'getStreetName',
        'absolute_direction' => 'getAbsoluteDirection',
        'exit' => 'getExit',
        'stay_on' => 'getStayOn',
        'area' => 'getArea',
        'bogus_name' => 'getBogusName',
        'lat' => 'getLat',
        'lon' => 'getLon',
        'alerts' => 'getAlerts',
        'elevation' => 'getElevation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['distance'] = $data['distance'] ?? null;
        $this->container['relative_direction'] = $data['relative_direction'] ?? null;
        $this->container['street_name'] = $data['street_name'] ?? null;
        $this->container['absolute_direction'] = $data['absolute_direction'] ?? null;
        $this->container['exit'] = $data['exit'] ?? null;
        $this->container['stay_on'] = $data['stay_on'] ?? null;
        $this->container['area'] = $data['area'] ?? null;
        $this->container['bogus_name'] = $data['bogus_name'] ?? null;
        $this->container['lat'] = $data['lat'] ?? null;
        $this->container['lon'] = $data['lon'] ?? null;
        $this->container['alerts'] = $data['alerts'] ?? null;
        $this->container['elevation'] = $data['elevation'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['distance'] === null) {
            $invalidProperties[] = "'distance' can't be null";
        }
        if ($this->container['relative_direction'] === null) {
            $invalidProperties[] = "'relative_direction' can't be null";
        }
        if ($this->container['street_name'] === null) {
            $invalidProperties[] = "'street_name' can't be null";
        }
        if ($this->container['absolute_direction'] === null) {
            $invalidProperties[] = "'absolute_direction' can't be null";
        }
        if ($this->container['exit'] === null) {
            $invalidProperties[] = "'exit' can't be null";
        }
        if ($this->container['stay_on'] === null) {
            $invalidProperties[] = "'stay_on' can't be null";
        }
        if ($this->container['area'] === null) {
            $invalidProperties[] = "'area' can't be null";
        }
        if ($this->container['bogus_name'] === null) {
            $invalidProperties[] = "'bogus_name' can't be null";
        }
        if ($this->container['lat'] === null) {
            $invalidProperties[] = "'lat' can't be null";
        }
        if ($this->container['lon'] === null) {
            $invalidProperties[] = "'lon' can't be null";
        }
        if ($this->container['alerts'] === null) {
            $invalidProperties[] = "'alerts' can't be null";
        }
        if ($this->container['elevation'] === null) {
            $invalidProperties[] = "'elevation' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets distance
     *
     * @return double
     */
    public function getDistance()
    {
        return $this->container['distance'];
    }

    /**
     * Sets distance
     *
     * @param double $distance distance
     *
     * @return self
     */
    public function setDistance($distance)
    {
        $this->container['distance'] = $distance;

        return $this;
    }

    /**
     * Gets relative_direction
     *
     * @return \OpenBitApp\OTPClient\Model\RelativeDirection
     */
    public function getRelativeDirection()
    {
        return $this->container['relative_direction'];
    }

    /**
     * Sets relative_direction
     *
     * @param \OpenBitApp\OTPClient\Model\RelativeDirection $relative_direction relative_direction
     *
     * @return self
     */
    public function setRelativeDirection($relative_direction)
    {
        $this->container['relative_direction'] = $relative_direction;

        return $this;
    }

    /**
     * Gets street_name
     *
     * @return string
     */
    public function getStreetName()
    {
        return $this->container['street_name'];
    }

    /**
     * Sets street_name
     *
     * @param string $street_name street_name
     *
     * @return self
     */
    public function setStreetName($street_name)
    {
        $this->container['street_name'] = $street_name;

        return $this;
    }

    /**
     * Gets absolute_direction
     *
     * @return \OpenBitApp\OTPClient\Model\AbsoluteDirection
     */
    public function getAbsoluteDirection()
    {
        return $this->container['absolute_direction'];
    }

    /**
     * Sets absolute_direction
     *
     * @param \OpenBitApp\OTPClient\Model\AbsoluteDirection $absolute_direction absolute_direction
     *
     * @return self
     */
    public function setAbsoluteDirection($absolute_direction)
    {
        $this->container['absolute_direction'] = $absolute_direction;

        return $this;
    }

    /**
     * Gets exit
     *
     * @return string
     */
    public function getExit()
    {
        return $this->container['exit'];
    }

    /**
     * Sets exit
     *
     * @param string $exit exit
     *
     * @return self
     */
    public function setExit($exit)
    {
        $this->container['exit'] = $exit;

        return $this;
    }

    /**
     * Gets stay_on
     *
     * @return bool
     */
    public function getStayOn()
    {
        return $this->container['stay_on'];
    }

    /**
     * Sets stay_on
     *
     * @param bool $stay_on stay_on
     *
     * @return self
     */
    public function setStayOn($stay_on)
    {
        $this->container['stay_on'] = $stay_on;

        return $this;
    }

    /**
     * Gets area
     *
     * @return bool
     */
    public function getArea()
    {
        return $this->container['area'];
    }

    /**
     * Sets area
     *
     * @param bool $area area
     *
     * @return self
     */
    public function setArea($area)
    {
        $this->container['area'] = $area;

        return $this;
    }

    /**
     * Gets bogus_name
     *
     * @return bool
     */
    public function getBogusName()
    {
        return $this->container['bogus_name'];
    }

    /**
     * Sets bogus_name
     *
     * @param bool $bogus_name bogus_name
     *
     * @return self
     */
    public function setBogusName($bogus_name)
    {
        $this->container['bogus_name'] = $bogus_name;

        return $this;
    }

    /**
     * Gets lat
     *
     * @return double
     */
    public function getLat()
    {
        return $this->container['lat'];
    }

    /**
     * Sets lat
     *
     * @param double $lat lat
     *
     * @return self
     */
    public function setLat($lat)
    {
        $this->container['lat'] = $lat;

        return $this;
    }

    /**
     * Gets lon
     *
     * @return double
     */
    public function getLon()
    {
        return $this->container['lon'];
    }

    /**
     * Sets lon
     *
     * @param double $lon lon
     *
     * @return self
     */
    public function setLon($lon)
    {
        $this->container['lon'] = $lon;

        return $this;
    }

    /**
     * Gets alerts
     *
     * @return \OpenBitApp\OTPClient\Model\LocalizedAlert[]
     */
    public function getAlerts()
    {
        return $this->container['alerts'];
    }

    /**
     * Sets alerts
     *
     * @param \OpenBitApp\OTPClient\Model\LocalizedAlert[] $alerts alerts
     *
     * @return self
     */
    public function setAlerts($alerts)
    {
        $this->container['alerts'] = $alerts;

        return $this;
    }

    /**
     * Gets elevation
     *
     * @return \OpenBitApp\OTPClient\Model\Elevation[]
     */
    public function getElevation()
    {
        return $this->container['elevation'];
    }

    /**
     * Sets elevation
     *
     * @param \OpenBitApp\OTPClient\Model\Elevation[] $elevation elevation
     *
     * @return self
     */
    public function setElevation($elevation)
    {
        $this->container['elevation'] = $elevation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


